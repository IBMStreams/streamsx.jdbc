// *******************************************************************************
// * Copyright (C) 2015 International Business Machines Corporation
// * All Rights Reserved
// *******************************************************************************
namespace com.ibm.streamsx.jdbc.sample.jdbcrun;
use com.ibm.streamsx.jdbc::*;
use com.ibm.streamsx.jdbc.types::* ;
/*******************************************************************************
 * JDBCRunErrorPort demonstrates how to Error Port with JDBCRun operator.
 *******************************************************************************/

composite JDBCRunErrorPort {

	type
		insertSchema = 	int32 		ID, 
						rstring 	NAME;
		rsSchema = 		int32 		ID, 
						rstring 	NAME;
		selectSchema = 	rstring		sql; 
	graph
		stream<insertSchema> pulse = Beacon() {
			param
				iterations : 1u ;
			output
				pulse : ID 				= 1,
						NAME			= "Mike Ward";
		}
		stream<insertSchema> create = JDBCRun(pulse){
			param
				jdbcDriverLib: "jdbcDriverLib";
				jdbcClassName: "jdbcClassName";
				jdbcUrl: "jdbc:db2://<server:port>/<database>";
				jdbcUser: "jdbcUser";
				jdbcPassword: "jdbcPassword";
				statement:    "CREATE TABLE JDBCRUN_ERRORPORT (ID INTEGER NOT NULL, NAME CHAR(20), PRIMARY KEY(ID))";
		}
		stream<insertSchema> insert1 = JDBCRun(create){
			param
				jdbcDriverLib: "jdbcDriverLib";
				jdbcClassName: "jdbcClassName";
				jdbcUrl: "jdbc:db2://<server:port>/<database>";
				jdbcUser: "jdbcUser";
				jdbcPassword: "jdbcPassword";
				statement:    "INSERT INTO JDBCRUN_ERRORPORT (ID, NAME)
									VALUES (?, ?)";
				statementParamAttrs: "ID, NAME";
		}
		
		(stream<insertSchema> insert2; stream <tuple<insertSchema> inTuple, JdbcSqlStatus_T error> errors)= JDBCRun(insert1){
			param
				jdbcDriverLib: "jdbcDriverLib";
				jdbcClassName: "jdbcClassName";
				jdbcUrl: "jdbc:db2://<server:port>/<database>";
				jdbcUser: "jdbcUser";
				jdbcPassword: "jdbcPassword";
				statement:    "INSERT INTO JDBCRUN_ERRORPORT (ID, NAME)
									VALUES (?, ?)";
				statementParamAttrs: "ID, NAME";
				sqlStatusAttr: "error";
		}

		stream<selectSchema> genSelect = Functor(insert1){
			output
				genSelect: sql="SELECT ID, NAME FROM JDBCRUN_ERRORPORT";
		}
		
		() as errorprint = Custom(errors) {
			logic onTuple errors:
				printStringLn((rstring)inTuple.ID + "," + inTuple.NAME + ", errorCode: " + (rstring)error.errorCode + ", sqlState: " + error.sqlState);
		}

		stream<rsSchema> select = JDBCRun(genSelect){
			param
				jdbcDriverLib: "jdbcDriverLib";
				jdbcClassName: "jdbcClassName";
				jdbcUrl: "jdbc:db2://<server:port>/<database>";
				jdbcUser: "jdbcUser";
				jdbcPassword: "jdbcPassword";
				statementAttr:    sql;
		}
		
		() as printer = Custom(select) {
			logic onTuple select:
				printStringLn((rstring)ID + "," + NAME);
		}
		stream<rsSchema> drop = JDBCRun(select){
			param
				jdbcDriverLib: "jdbcDriverLib";
				jdbcClassName: "jdbcClassName";
				jdbcUrl: "jdbc:db2://<server:port>/<database>";
				jdbcUser: "jdbcUser";
				jdbcPassword: "jdbcPassword";
				statement:    "DROP TABLE JDBCRUN_ERRORPORT";
		}
}