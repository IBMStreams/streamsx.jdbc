// *******************************************************************************
// * Copyright (C) 2015-2018 International Business Machines Corporation
// * All Rights Reserved
// *******************************************************************************
namespace com.ibm.streamsx.jdbc.sample.jdbcrun;
use com.ibm.streamsx.jdbc::*;
use com.ibm.streamsx.jdbc.types::* ;
/*******************************************************************************
 * JDBCReconnection demonstrates how to use the Error Port with JDBCRun operator.
 * and how to set the reconnectionPolicy
 * Create a test table on your database 
 * db2 "CREATE TABLE JDBCRUN_RECONNECT (ID INTEGER NOT NULL, NAME CHAR(20), PRIMARY KEY(ID))
 * and insert some rows in your table.
 * db2 "INSERT INTO JDBCRUN_RECONNECT values(1, 'name1')"
 * db2 "INSERT INTO JDBCRUN_RECONNECT values(2, 'name3')"
 * Please replace the value of jdbcUrl, jdbcUser and jdbcPassword with your DB2
 * During a connection to a data server, set the retrieveMessagesFromServerOnGetMessage property 
 * to true if you want full message text from an SQLException.getMessage call.
 * Database credentials 
 * Make and start the application.
 * During the test disconnect the database (
 * for example unplug the Ethernet cable 
 * or stop your DB2 database (db2stop force)
 * During the test check the console output
 * ERROR #splapplog,J[0],P[0],select M[JavaOp.cpp:log:83]  - CDIST2801E JDBC connection failed. The exception is {0} 
 * Now plug the Ethernet cable again
 * Or restart your DB2 Database (db2start)
 * You can see after some exceptions and a pause your SELECT SQL statement will be delivered new tuples.
 * 
 *******************************************************************************/

composite JDBCReconnection {

	param
		expression<rstring> $jdbcDriverLib	: getSubmissionTimeValue("jdbcDriverLib", "opt/db2jcc4.jar");
		expression<rstring> $jdbcClassName	: getSubmissionTimeValue("jdbcClassName", "com.ibm.db2.jcc.DB2Driver");
		expression<rstring> $jdbcUrl 		: getSubmissionTimeValue("jdbcUrl", "jdbc:db2://<your-db2-server-name>:50000/<your-db-name>:retrieveMessagesFromServerOnGetMessage=true;");
		expression<rstring> $jdbcUser 		: getSubmissionTimeValue("jdbcUser", "<yourdb2-user>");
		expression<rstring> $jdbcPassword 	: getSubmissionTimeValue("jdbcPassword", "<yourdb2-password");
 
	
	type
		rsSchema      = int32 ID, rstring 	NAME;
		selectSchema  = rstring	sql; 

	graph
	
	   /**
	   * The pulse is a Beacon operator that generates counter.
	   */
		stream<int32 counter> pulse = Beacon() {
	        logic
	        	state: mutable int32 i = 0;        
			param
				initDelay   : 2.0;
				iterations  : 200u ;
				period		: 1.0;
			output
				pulse : counter = i++;
		}
	

	   /**
	   * The genSelect is a Functor operator and generates SELECT statement.
	   */
		stream<selectSchema> genSelect = Functor(pulse){
				logic 
				onTuple pulse:
					printStringLn("counter " + (rstring)counter);			
				output
					genSelect: sql="SELECT ID, NAME FROM JDBCRUN_RECONNECT";
		}
		

	   /**
	   * The select is a JDBCRun operator and generates result in first output port
	   * and generates tuples in case of any SQL errors .
	   */
		(stream<rsSchema> select ; stream <tuple<rsSchema> inTuple, JdbcSqlStatus_T error> errors) = JDBCRun(genSelect){
			param
				jdbcDriverLib         : $jdbcDriverLib;
				jdbcClassName         : $jdbcClassName;
				jdbcUrl               : $jdbcUrl;
				jdbcUser              : $jdbcUser;
				jdbcPassword          : $jdbcPassword;
				statementAttr         :  sql;
				reconnectionPolicy    : "BoundedRetry"; 
				reconnectionInterval  : 20.0;
				reconnectionBound     : 20;
		}

	   /**
	   * The errorprint is a Custom operator and print SQL errors
	   */
		() as errorprint = Custom(errors) {
			logic onTuple errors:
				printStringLn("sqlCode: " + (rstring)error.sqlCode + ", sqlState: " + error.sqlState + " sqlMessage " + error.sqlMessage);
		}

		
	   /**
	   * The printSelect is a Custom operator and print the SQL results
	   */
		() as printSelect = Custom(select) {
			logic onTuple select:
				printStringLn((rstring)ID + "," + NAME);
		}

}
